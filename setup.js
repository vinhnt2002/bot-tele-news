#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🚀 Twitter Telegram Bot Setup Script');
console.log('=====================================\n');

const questions = [
  {
    key: 'TELEGRAM_BOT_TOKEN',
    question: 'Nhập Telegram Bot Token (từ @BotFather): ',
    required: true
  },
  {
    key: 'TELEGRAM_CHAT_ID',
    question: 'Nhập Telegram Chat ID (từ @userinfobot): ',
    required: true
  },
  {
    key: 'TWITTER_API_KEY',
    question: 'Nhập Twitter API Key (từ twitterapi.io): ',
    required: true
  },
  {
    key: 'MONGODB_URI',
    question: 'Nhập MongoDB URI [mongodb://localhost:27017/twitter-telegram-bot]: ',
    required: false,
    default: 'mongodb://localhost:27017/twitter-telegram-bot'
  },
  {
    key: 'CHECK_INTERVAL_MINUTES',
    question: 'Thời gian kiểm tra tweets (phút) [5]: ',
    required: false,
    default: '5'
  }
];

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question.question, (answer) => {
      if (!answer && question.required) {
        console.log('❌ Trường này là bắt buộc!');
        return askQuestion(question).then(resolve);
      }
      resolve(answer || question.default || '');
    });
  });
}

async function setupBot() {
  try {
    const config = {};
    
    console.log('Vui lòng nhập thông tin cấu hình:\n');
    
    for (const question of questions) {
      config[question.key] = await askQuestion(question);
    }
    
    // Tạo nội dung file .env
    let envContent = '# Twitter Telegram Bot Configuration\n';
    envContent += '# Generated by setup script\n\n';
    
    for (const [key, value] of Object.entries(config)) {
      envContent += `${key}=${value}\n`;
    }
    
    envContent += '\n# Application Settings\n';
    envContent += 'NODE_ENV=development\n';
    envContent += 'PORT=3000\n';
    
    // Kiểm tra nếu file .env đã tồn tại
    const envPath = path.join(__dirname, '.env');
    if (fs.existsSync(envPath)) {
      const backup = await new Promise((resolve) => {
        rl.question('\n⚠️  File .env đã tồn tại. Tạo backup? (y/n): ', resolve);
      });
      
      if (backup.toLowerCase() === 'y') {
        const backupPath = `${envPath}.backup.${Date.now()}`;
        fs.copyFileSync(envPath, backupPath);
        console.log(`✅ Đã tạo backup: ${backupPath}`);
      }
    }
    
    // Ghi file .env
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ Đã tạo file .env thành công!');
    
    // Tạo thư mục logs
    const logsDir = path.join(__dirname, 'logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
      console.log('✅ Đã tạo thư mục logs');
    }
    
    console.log('\n🎉 Setup hoàn tất!');
    console.log('\nCác bước tiếp theo:');
    console.log('1. Cài đặt dependencies: npm install');
    console.log('2. Khởi động bot: npm start');
    console.log('3. Hoặc development mode: npm run dev');
    console.log('\n📖 Xem README.md để biết thêm chi tiết!');
    
  } catch (error) {
    console.error('❌ Lỗi setup:', error.message);
  } finally {
    rl.close();
  }
}

setupBot(); 