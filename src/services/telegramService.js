const TelegramBot = require('node-telegram-bot-api');
const logger = require('../../utils/logger');
const twitterService = require('./twitterService');
const moment = require('moment');

class TelegramService {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    this.chatId = process.env.TELEGRAM_CHAT_ID;
    this.setupCommands();
  }

  setupCommands() {
    // Command /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const welcomeMessage = `
ü§ñ *Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Twitter News!*

Bot n√†y s·∫Ω theo d√µi c√°c t√†i kho·∫£n Twitter v√† th√¥ng b√°o khi c√≥ tweet m·ªõi.

*C√°c l·ªánh c√≥ s·∫µn:*
/add @username - Th√™m t√†i kho·∫£n Twitter ƒë·ªÉ theo d√µi
/remove @username - X√≥a t√†i kho·∫£n kh·ªèi danh s√°ch theo d√µi
/list - Xem danh s√°ch t√†i kho·∫£n ƒëang theo d√µi
/check - Ki·ªÉm tra tweets m·ªõi ngay l·∫≠p t·ª©c
/status - Xem tr·∫°ng th√°i bot
/help - Xem h∆∞·ªõng d·∫´n

*V√≠ d·ª•:*
\`/add elonmusk\`
\`/remove elonmusk\`
\`/check\`
      `;
      
      this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
    });

    // Command /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      const helpMessage = `
*üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot Twitter News*

*Qu·∫£n l√Ω theo d√µi:*
\`/add username\` - Th√™m t√†i kho·∫£n Twitter
\`/remove username\` - X√≥a t√†i kho·∫£n
\`/list\` - Xem danh s√°ch theo d√µi

*Ki·ªÉm tra v√† theo d√µi:*
\`/check\` - Ki·ªÉm tra tweets m·ªõi ngay
\`/status\` - Xem tr·∫°ng th√°i bot

*L∆∞u √Ω:*
‚Ä¢ Username kh√¥ng c·∫ßn c√≥ d·∫•u @
‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra tweets m·ªõi m·ªói ${process.env.CHECK_INTERVAL_MINUTES || 5} ph√∫t
‚Ä¢ Ch·ªâ c√°c t√†i kho·∫£n Twitter public m·ªõi c√≥ th·ªÉ theo d√µi ƒë∆∞·ª£c
‚Ä¢ Bot s·∫Ω l∆∞u l·∫°i tweets ƒë·ªÉ tr√°nh spam tr√πng l·∫∑p
      `;
      
      this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // Command /add
    this.bot.onText(/\/add (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const username = match[1].replace('@', '').trim();

      if (!username) {
        this.bot.sendMessage(chatId, '‚ùå Vui l√≤ng nh·∫≠p username!\nV√≠ d·ª•: `/add elonmusk`', { parse_mode: 'Markdown' });
        return;
      }

      this.bot.sendMessage(chatId, `‚è≥ ƒêang th√™m @${username}...`);

      const result = await twitterService.addUserToTrack(username);
      
      if (result.success) {
        this.bot.sendMessage(chatId, `‚úÖ ${result.message}`);
      } else {
        this.bot.sendMessage(chatId, `‚ùå ${result.message}`);
      }
    });

    // Command /remove
    this.bot.onText(/\/remove (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const username = match[1].replace('@', '').trim();

      if (!username) {
        this.bot.sendMessage(chatId, '‚ùå Vui l√≤ng nh·∫≠p username!\nV√≠ d·ª•: `/remove elonmusk`', { parse_mode: 'Markdown' });
        return;
      }

      const result = await twitterService.removeUserFromTrack(username);
      
      if (result.success) {
        this.bot.sendMessage(chatId, `‚úÖ ${result.message}`);
      } else {
        this.bot.sendMessage(chatId, `‚ùå ${result.message}`);
      }
    });

    // Command /list
    this.bot.onText(/\/list/, async (msg) => {
      const chatId = msg.chat.id;
      
      const users = await twitterService.getTrackedUsers();
      
      if (users.length === 0) {
        this.bot.sendMessage(chatId, 'üìù Ch∆∞a c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c theo d√µi.\nS·ª≠ d·ª•ng `/add username` ƒë·ªÉ th√™m t√†i kho·∫£n.', { parse_mode: 'Markdown' });
        return;
      }

      let message = `üìã *Danh s√°ch t√†i kho·∫£n ƒëang theo d√µi:*\n\n`;
      users.forEach((user, index) => {
        message += `${index + 1}. ${user.displayName} (@${user.username})\n`;
      });
      
      message += `\n*T·ªïng: ${users.length} t√†i kho·∫£n*`;
      
      this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    });

    // Command /check - Ki·ªÉm tra tweets th·ªß c√¥ng
    this.bot.onText(/\/check/, async (msg) => {
      const chatId = msg.chat.id;
      
      this.bot.sendMessage(chatId, '‚è≥ ƒêang ki·ªÉm tra tweets m·ªõi...');
      
      const tweetChecker = require('../scheduler/tweetChecker');
      const result = await tweetChecker.manualCheck();
      
      if (result.success) {
        this.bot.sendMessage(chatId, `‚úÖ ${result.message}`);
      } else {
        this.bot.sendMessage(chatId, `‚ùå ${result.message}`);
      }
    });

    // Command /status - Xem tr·∫°ng th√°i bot
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      
      const users = await twitterService.getTrackedUsers();
      const Tweet = require('../models/Tweet');
      const totalTweets = await Tweet.countDocuments();
      const todayTweets = await Tweet.countDocuments({
        createdAt: { $gte: new Date(new Date().setHours(0,0,0,0)) }
      });
      
      const statusMessage = `
üìä *Tr·∫°ng th√°i Bot*

üë• T√†i kho·∫£n theo d√µi: ${users.length}
üìù T·ªïng tweets ƒë√£ l∆∞u: ${totalTweets}
üìÖ Tweets h√¥m nay: ${todayTweets}
‚è∞ Ki·ªÉm tra m·ªói: ${process.env.CHECK_INTERVAL_MINUTES || 5} ph√∫t

üîÑ Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
      `;
      
      this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
    });



    // Error handling
    this.bot.on('error', (error) => {
      logger.error('Telegram Bot Error:', error.message);
    });

    logger.info('Telegram Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!');
  }

  // G·ª≠i tweet m·ªõi l√™n Telegram
  async sendTweetToTelegram(tweet) {
    try {
      const tweetUrl = `https://twitter.com/${tweet.username}/status/${tweet.tweetId}`;
      const timeAgo = moment(tweet.createdAt).fromNow();
      
      // L√†m s·∫°ch text b·ªè URL ·∫£nh/media t·ª± ƒë·ªông
      let cleanText = tweet.text;
      if (tweet.media && tweet.media.length > 0) {
        tweet.media.forEach(media => {
          if (media.display_url) {
            cleanText = cleanText.replace(new RegExp(`https://t\.co/\\w+`, 'g'), '').trim();
          }
        });
      }

      // T·∫°o caption cho tin t·ª©c
      let caption = `
üì∞ **TIN T·ª®C M·ªöI**

üë§ **${tweet.displayName}** (@${tweet.username})
üïê ${timeAgo}

üìù **N·ªôi dung:**
${cleanText}

üìä **Th·ªëng k√™:**
üîÑ ${tweet.retweetCount} Retweets
‚ù§Ô∏è ${tweet.likeCount} Likes
üí¨ ${tweet.replyCount || 0} Replies
üëÅÔ∏è ${tweet.viewCount || 0} Views

üîó [Xem b√†i vi·∫øt g·ªëc](${tweetUrl})
      `.trim();

      let sentMessage;

      // Ki·ªÉm tra c√≥ media kh√¥ng
      if (tweet.media && tweet.media.length > 0) {
        const photos = tweet.media.filter(media => media.type === 'photo' && media.url);
        const videos = tweet.media.filter(media => media.type === 'video' && media.url);
        
        if (photos.length > 0) {
          if (photos.length === 1) {
            // G·ª≠i 1 ·∫£nh v·ªõi caption
            sentMessage = await this.bot.sendPhoto(this.chatId, photos[0].url, {
              caption: caption,
              parse_mode: 'Markdown'
            });
          } else {
            // G·ª≠i nhi·ªÅu ·∫£nh trong album
            const mediaGroup = photos.slice(0, 10).map((photo, index) => ({
              type: 'photo',
              media: photo.url,
              caption: index === 0 ? caption : undefined,
              parse_mode: index === 0 ? 'Markdown' : undefined
            }));
            
            const messages = await this.bot.sendMediaGroup(this.chatId, mediaGroup);
            sentMessage = messages[0]; // L·∫•y message ƒë·∫ßu ti√™n
          }
        } else if (videos.length > 0) {
          // G·ª≠i video (ch·ªâ g·ª≠i video ƒë·∫ßu ti√™n v√¨ Telegram gi·ªõi h·∫°n)
          try {
            sentMessage = await this.bot.sendVideo(this.chatId, videos[0].url, {
              caption: caption,
              parse_mode: 'Markdown'
            });
          } catch (videoError) {
            // N·∫øu l·ªói video, g·ª≠i text v·ªõi link
            logger.warn(`Kh√¥ng g·ª≠i ƒë∆∞·ª£c video, g·ª≠i text thay th·∫ø: ${videoError.message}`);
            caption += `\n\nüé• **Video:** [Xem video](${videos[0].url})`;
            sentMessage = await this.bot.sendMessage(this.chatId, caption, { 
              parse_mode: 'Markdown',
              disable_web_page_preview: false
            });
          }
        } else {
          // C√≥ media nh∆∞ng kh√¥ng ph·∫£i ·∫£nh/video, g·ª≠i text
          sentMessage = await this.bot.sendMessage(this.chatId, caption, { 
            parse_mode: 'Markdown',
            disable_web_page_preview: false
          });
        }
      } else {
        // Kh√¥ng c√≥ media, ch·ªâ g·ª≠i text
        sentMessage = await this.bot.sendMessage(this.chatId, caption, { 
          parse_mode: 'Markdown',
          disable_web_page_preview: false
        });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ g·ª≠i
      tweet.isPostedToTelegram = true;
      tweet.telegramMessageId = sentMessage.message_id.toString();
      await tweet.save();

      logger.info(`ƒê√£ g·ª≠i tweet ${tweet.tweetId} l√™n Telegram v·ªõi ${tweet.media?.length || 0} media`);
      return true;
    } catch (error) {
      logger.error(`L·ªói g·ª≠i tweet ${tweet.tweetId} l√™n Telegram:`, {
        message: error.message,
        code: error.code,
        stack: error.stack
      });
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o h·ªá th·ªëng
  async sendSystemMessage(message) {
    try {
      await this.bot.sendMessage(this.chatId, `ü§ñ ${message}`);
    } catch (error) {
      logger.error('L·ªói g·ª≠i system message:', error.message);
    }
  }
}

module.exports = TelegramService; 